// // SAVE LAYERSETS TO FILES// Sprite factory script// Structure your PS document as such://// ----------------------------------// [ root layerSet]//  |// 	|- [ frame n layerSet / layer ]// 	|- [ frame n-1 layerSet / layer ]// 	|- [ frame n-2 layerSet / layer ]//// ------------- etc. ---------------//// In other words, the first level of folders are each a row// on the sprite, then there is another level of folders that// are each just a separate "action" in the sprite row, with// the child folders each being a frame in that action. ////#include "./PSD.jsx"#include "./PSD.utils.jsx"PSD.layersetstofiles = (function(ns, _) {	// this is the document reference	var _defaults = {			// this is the layerset that contains the frames			root_layerset: '$FRAMES',			reverse_order: false,			close_when_finished: true,			export_opts: {				dir: 'frames/',				// fileBase: 'frame',				count_digits: 4,				format: 'png'			}		},		_export_count = 0,		_o,		_doc, // document		_export_dir, // export folder		_root; // root layerset		function _start(options, doc) {		var layers, layer, i, exportPath;				PSD.utils.init();		PSD.utils.setFSLocation();				_o = _.defaults(_defaults, options);		// set the document		_doc = doc || app.activeDocument;				// remove extra layers and set root layerSet		_root = _removeExtraLayers();		if(typeof _root !== 'undefined') layers = _root.layers;		else throw new Error("No root layerSet found!");						// set export directory folder and create if necessary		// exportPath = (_o.export_opts.dir.slice(0,1) === '/') ? _o.export_opts.dir : (_doc.path+'/'+_o.export_opts.dir);		// _export_dir = new Folder(exportPath);
		_export_dir = _getExportDir();		if(!_export_dir.exists) _export_dir = _export_dir.create();				// merge layerSets, hide all child layers		for(i=0; i<layers.length; i++) {			if(layers[i].typename === 'LayerSet') layers[i].merge();		}						// get 'em out!		_exportLayers(layers);				// close out		if(_o.close_when_finished) _doc.close(SaveOptions.DONOTSAVECHANGES);			};		function _removeExtraLayers() {		var layers = _doc.layers,			layer,			rootLayerSet;				// remove layerSets except root one		for(var i=0; i<layers.length; i++) {			layer = layers[i];			switch(layer.typename) {				case 'LayerSet': // check for root					if(layer.name === _o.root_layerset) {						rootLayerSet = layer;						break;					}					// falls through otherwise				default: // otherwise remove					layer.remove();					break;			}		}				return rootLayerSet;	}		function _exportLayers(layers) {		var exportOptions = new ExportOptionsSaveForWeb(),			i, layer, exportFile;					// set export options		exportOptions.format = SaveDocumentType.PNG;		exportOptions.transparency = true;						// can go forward or in reverse		if(_o.reverse_order) {			$.writeln("Exporting "+layers.length+" layers in reverse order");			for(i=0;i<layers.length;i++) { 				_layerVisibilitySweep(layers, i);				_exportDocument(exportOptions);			}					} else {			$.writeln("Exporting "+layers.length+" layers in normal order");			for(i=layers.length-1;i>=0;i--) {				_layerVisibilitySweep(layers, i);				_exportDocument(exportOptions);			}			}	};		function _getExportDir(path) {		var path = path || _getWorkingDocFileBase(),			exportPath = (path.slice(0,1) === '/') ? path : (_doc.path+'/'+path);		return new Folder(exportPath);	}		function _layerVisibilitySweep(layers, n) {		var i;		if(n > layers.length || n < 0) throw new Error("Invalid layer number");		for(i=0;i<layers.length;i++) { layers[i].visible = (i === n); }	};		function _exportDocument(exportOptions) {			// export file						var exportFile = new File(_export_dir.fullName +'/'+ _generateFileName(_export_count));			$.writeln("Exporting file "+exportFile.fullName);						// make it so			_doc.exportDocument(exportFile, ExportType.SAVEFORWEB, exportOptions);			_export_count++;						return exportFile;			};		function _generateFileName(n) {		// filebase is either explicitly defined, or just taken from the src filename		// var fileBase = !_.isUndefined(_o.export_opts.fileBase) ? _o.export_opts.fileBase : _doc.name.split('.').splice(1, -1).join('.');		// var fileName, fileBase, parts, ext;		// fileName = _doc.name;		// parts = _doc.name.split('.');		// ext = parts.pop();		// fileBase = parts.join('.');		// $.writeln(_doc.name);		// $.writeln(_doc.name.split('.').slice(1, -1).join('.'));		// $.bp();		// var fileBase = _doc.name.split('.').slice(1, -1).join('.');		var fileBase = _.isString(_o.export_opts.fileBase) ? _o.export_opts.fileBase : _getWorkingDocFileBase();		if(!_.isString(fileBase)) throw new Error("Error parsing file name.");		return fileBase +'_'				+ n.digits(_o.export_opts.count_digits)				+ '.'+_o.export_opts.format;	};		function _getWorkingDocFileBase() {		if (!_.isString(_doc.name)) throw new Error("No working doc selected.");		var fileBase = /^(.*)\.[A-z]{2,4}$/.exec(_doc.name)[1];		return fileBase;	}		ns.start = _start;		return ns;}(PSD.namespace("layersetstofiles"), _)); 	